
card-vendor-103vct6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025a0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002784  08002784  00012784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027b0  080027b0  00020378  2**0
                  CONTENTS
  4 .ARM          00000000  080027b0  080027b0  00020378  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027b0  080027b0  00020378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  080027b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a4  20000378  08002b30  00020378  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c1c  08002b30  00021c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be03  00000000  00000000  000203a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002208  00000000  00000000  0002c1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002e3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002eee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032ad  00000000  00000000  0002f910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113c8  00000000  00000000  00032bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093109  00000000  00000000  00043f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d708e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b4c  00000000  00000000  000d70e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000378 	.word	0x20000378
 8000200:	00000000 	.word	0x00000000
 8000204:	0800276c 	.word	0x0800276c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000037c 	.word	0x2000037c
 8000220:	0800276c 	.word	0x0800276c

08000224 <utils_buffer_init>:
 * 
 * @param buffer Pointer to Buffer Object
 * @return true if OK
 * @return false if Failed
 */
bool utils_buffer_init(utils_buffer_t * buffer, uint16_t sizeOfObject){
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	460b      	mov	r3, r1
 800022e:	807b      	strh	r3, [r7, #2]
    buffer->head = 0;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2200      	movs	r2, #0
 8000234:	605a      	str	r2, [r3, #4]
    buffer->tail = 0;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
    buffer->count = 0;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2200      	movs	r2, #0
 8000240:	609a      	str	r2, [r3, #8]
    buffer->size = sizeOfObject;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	887a      	ldrh	r2, [r7, #2]
 8000246:	f8a3 280c 	strh.w	r2, [r3, #2060]	; 0x80c
    memset(buffer->buffer , 0, sizeof(buffer->buffer));
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	330c      	adds	r3, #12
 800024e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000252:	2100      	movs	r1, #0
 8000254:	4618      	mov	r0, r3
 8000256:	f002 fa81 	bl	800275c <memset>
    return true;
 800025a:	2301      	movs	r3, #1
}
 800025c:	4618      	mov	r0, r3
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <BILLACCEPTOR_init>:
 */

#include "main.h"
#include "Device/bill_acceptor.h"

bool BILLACCEPTOR_init(){
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	return true;
 8000268:	2301      	movs	r3, #1
}
 800026a:	4618      	mov	r0, r3
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr

08000272 <EEPROM_init>:

#include "main.h"
#include "Device/eeprom.h"


bool EEPROM_init(){
 8000272:	b480      	push	{r7}
 8000274:	af00      	add	r7, sp, #0
	return true;
 8000276:	2301      	movs	r3, #1
}
 8000278:	4618      	mov	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr

08000280 <KEYPAD_init>:
};

// Internal function
static uint8_t KEYPAD_calculate_key(uint8_t row, uint8_t col);

bool KEYPAD_init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	// Init GPIO
	int nb_io = sizeof(gpio_table)/sizeof(GPIO_info_t);
 8000286:	2308      	movs	r3, #8
 8000288:	603b      	str	r3, [r7, #0]
	for (uint8_t var = 0; var < nb_io; ++var) {
 800028a:	2300      	movs	r3, #0
 800028c:	71fb      	strb	r3, [r7, #7]
 800028e:	e015      	b.n	80002bc <KEYPAD_init+0x3c>
		HAL_GPIO_Init(gpio_table[var].port, &gpio_table[var].init_info);
 8000290:	79fa      	ldrb	r2, [r7, #7]
 8000292:	490f      	ldr	r1, [pc, #60]	; (80002d0 <KEYPAD_init+0x50>)
 8000294:	4613      	mov	r3, r2
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	4413      	add	r3, r2
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	440b      	add	r3, r1
 800029e:	6818      	ldr	r0, [r3, #0]
 80002a0:	79fa      	ldrb	r2, [r7, #7]
 80002a2:	4613      	mov	r3, r2
 80002a4:	009b      	lsls	r3, r3, #2
 80002a6:	4413      	add	r3, r2
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <KEYPAD_init+0x50>)
 80002ac:	4413      	add	r3, r2
 80002ae:	3304      	adds	r3, #4
 80002b0:	4619      	mov	r1, r3
 80002b2:	f000 fe15 	bl	8000ee0 <HAL_GPIO_Init>
	for (uint8_t var = 0; var < nb_io; ++var) {
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	3301      	adds	r3, #1
 80002ba:	71fb      	strb	r3, [r7, #7]
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	683a      	ldr	r2, [r7, #0]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	dce5      	bgt.n	8000290 <KEYPAD_init+0x10>
	}
	return true;
 80002c4:	2301      	movs	r3, #1
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000000 	.word	0x20000000

080002d4 <LCD_init>:
		[LCD_D6] = 		{GPIOD,{ GPIO_PIN_14, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH }},
		[LCD_D7] = 		{GPIOD,{ GPIO_PIN_15, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH }},
};


bool LCD_init(){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
	// Init GPIO
	int nb_io = sizeof(gpio_table)/sizeof(GPIO_info_t);
 80002da:	230b      	movs	r3, #11
 80002dc:	603b      	str	r3, [r7, #0]
	for (uint8_t var = 0; var < nb_io; ++var) {
 80002de:	2300      	movs	r3, #0
 80002e0:	71fb      	strb	r3, [r7, #7]
 80002e2:	e015      	b.n	8000310 <LCD_init+0x3c>
		HAL_GPIO_Init(gpio_table[var].port, &gpio_table[var].init_info);
 80002e4:	79fa      	ldrb	r2, [r7, #7]
 80002e6:	490f      	ldr	r1, [pc, #60]	; (8000324 <LCD_init+0x50>)
 80002e8:	4613      	mov	r3, r2
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	4413      	add	r3, r2
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	440b      	add	r3, r1
 80002f2:	6818      	ldr	r0, [r3, #0]
 80002f4:	79fa      	ldrb	r2, [r7, #7]
 80002f6:	4613      	mov	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	4413      	add	r3, r2
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	4a09      	ldr	r2, [pc, #36]	; (8000324 <LCD_init+0x50>)
 8000300:	4413      	add	r3, r2
 8000302:	3304      	adds	r3, #4
 8000304:	4619      	mov	r1, r3
 8000306:	f000 fdeb 	bl	8000ee0 <HAL_GPIO_Init>
	for (uint8_t var = 0; var < nb_io; ++var) {
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	3301      	adds	r3, #1
 800030e:	71fb      	strb	r3, [r7, #7]
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	683a      	ldr	r2, [r7, #0]
 8000314:	429a      	cmp	r2, r3
 8000316:	dce5      	bgt.n	80002e4 <LCD_init+0x10>
	}
	return true;
 8000318:	2301      	movs	r3, #1
}
 800031a:	4618      	mov	r0, r3
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200000a0 	.word	0x200000a0

08000328 <TCD_init>:
		[TCD_ERROR2_IO] = 		{GPIOE,{ GPIO_PIN_5, GPIO_MODE_INPUT, GPIO_NOPULL, GPIO_SPEED_FREQ_MEDIUM }},
		[TCD_EMPTY2_IO] = 		{GPIOE,{ GPIO_PIN_6, GPIO_MODE_INPUT, GPIO_NOPULL, GPIO_SPEED_FREQ_MEDIUM }},
};


bool TCD_init(){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
	int nb_io = sizeof(gpio_table)/sizeof(GPIO_info_t);
 800032e:	230e      	movs	r3, #14
 8000330:	603b      	str	r3, [r7, #0]
	for (uint8_t var = 0; var < nb_io; ++var) {
 8000332:	2300      	movs	r3, #0
 8000334:	71fb      	strb	r3, [r7, #7]
 8000336:	e015      	b.n	8000364 <TCD_init+0x3c>
		HAL_GPIO_Init(gpio_table[var].port, &gpio_table[var].init_info);
 8000338:	79fa      	ldrb	r2, [r7, #7]
 800033a:	490f      	ldr	r1, [pc, #60]	; (8000378 <TCD_init+0x50>)
 800033c:	4613      	mov	r3, r2
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	4413      	add	r3, r2
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	440b      	add	r3, r1
 8000346:	6818      	ldr	r0, [r3, #0]
 8000348:	79fa      	ldrb	r2, [r7, #7]
 800034a:	4613      	mov	r3, r2
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	4413      	add	r3, r2
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	4a09      	ldr	r2, [pc, #36]	; (8000378 <TCD_init+0x50>)
 8000354:	4413      	add	r3, r2
 8000356:	3304      	adds	r3, #4
 8000358:	4619      	mov	r1, r3
 800035a:	f000 fdc1 	bl	8000ee0 <HAL_GPIO_Init>
	for (uint8_t var = 0; var < nb_io; ++var) {
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	3301      	adds	r3, #1
 8000362:	71fb      	strb	r3, [r7, #7]
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	429a      	cmp	r2, r3
 800036a:	dce5      	bgt.n	8000338 <TCD_init+0x10>
	}
	return true;
 800036c:	2301      	movs	r3, #1
}
 800036e:	4618      	mov	r0, r3
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	2000017c 	.word	0x2000017c

0800037c <CLOCK_init>:
 */
#include "main.h"
#include "Hal/clock.h"

bool CLOCK_init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b090      	sub	sp, #64	; 0x40
 8000380:	af00      	add	r7, sp, #0
	bool success = true;
 8000382:	2301      	movs	r3, #1
 8000384:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	2228      	movs	r2, #40	; 0x28
 800038e:	2100      	movs	r1, #0
 8000390:	4618      	mov	r0, r3
 8000392:	f002 f9e3 	bl	800275c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000396:	463b      	mov	r3, r7
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a4:	2302      	movs	r3, #2
 80003a6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a8:	2301      	movs	r3, #1
 80003aa:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ac:	2310      	movs	r3, #16
 80003ae:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b0:	2300      	movs	r3, #0
 80003b2:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0314 	add.w	r3, r7, #20
 80003b8:	4618      	mov	r0, r3
 80003ba:	f001 f869 	bl	8001490 <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <CLOCK_init+0x4e>
	{
		success = false;
 80003c4:	2300      	movs	r3, #0
 80003c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	230f      	movs	r3, #15
 80003cc:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ce:	2300      	movs	r3, #0
 80003d0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003de:	463b      	mov	r3, r7
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 fad6 	bl	8001994 <HAL_RCC_ClockConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d002      	beq.n	80003f4 <CLOCK_init+0x78>
	{
		success = false;
 80003ee:	2300      	movs	r3, #0
 80003f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	return success;
 80003f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3740      	adds	r7, #64	; 0x40
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <GPIO_init>:
#define SRC_HAL_GPIO_C_

#include "main.h"
#include "Hal/gpio.h"

bool GPIO_init(){
 8000400:	b480      	push	{r7}
 8000402:	b087      	sub	sp, #28
 8000404:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000406:	4b21      	ldr	r3, [pc, #132]	; (800048c <GPIO_init+0x8c>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <GPIO_init+0x8c>)
 800040c:	f043 0304 	orr.w	r3, r3, #4
 8000410:	6193      	str	r3, [r2, #24]
 8000412:	4b1e      	ldr	r3, [pc, #120]	; (800048c <GPIO_init+0x8c>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	f003 0304 	and.w	r3, r3, #4
 800041a:	617b      	str	r3, [r7, #20]
 800041c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041e:	4b1b      	ldr	r3, [pc, #108]	; (800048c <GPIO_init+0x8c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a1a      	ldr	r2, [pc, #104]	; (800048c <GPIO_init+0x8c>)
 8000424:	f043 0308 	orr.w	r3, r3, #8
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b18      	ldr	r3, [pc, #96]	; (800048c <GPIO_init+0x8c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0308 	and.w	r3, r3, #8
 8000432:	613b      	str	r3, [r7, #16]
 8000434:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000436:	4b15      	ldr	r3, [pc, #84]	; (800048c <GPIO_init+0x8c>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	4a14      	ldr	r2, [pc, #80]	; (800048c <GPIO_init+0x8c>)
 800043c:	f043 0310 	orr.w	r3, r3, #16
 8000440:	6193      	str	r3, [r2, #24]
 8000442:	4b12      	ldr	r3, [pc, #72]	; (800048c <GPIO_init+0x8c>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f003 0310 	and.w	r3, r3, #16
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800044e:	4b0f      	ldr	r3, [pc, #60]	; (800048c <GPIO_init+0x8c>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <GPIO_init+0x8c>)
 8000454:	f043 0320 	orr.w	r3, r3, #32
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <GPIO_init+0x8c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0320 	and.w	r3, r3, #32
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <GPIO_init+0x8c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a08      	ldr	r2, [pc, #32]	; (800048c <GPIO_init+0x8c>)
 800046c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <GPIO_init+0x8c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]
}
 800047e:	bf00      	nop
 8000480:	4618      	mov	r0, r3
 8000482:	371c      	adds	r7, #28
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000

08000490 <I2C_init>:
#include "Hal/i2c.h"


I2C_HandleTypeDef hi2c1;

void I2C_init(){
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <I2C_init+0x50>)
 8000496:	4a13      	ldr	r2, [pc, #76]	; (80004e4 <I2C_init+0x54>)
 8000498:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <I2C_init+0x50>)
 800049c:	4a12      	ldr	r2, [pc, #72]	; (80004e8 <I2C_init+0x58>)
 800049e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <I2C_init+0x50>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <I2C_init+0x50>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <I2C_init+0x50>)
 80004ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004b2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <I2C_init+0x50>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <I2C_init+0x50>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <I2C_init+0x50>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <I2C_init+0x50>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004cc:	4804      	ldr	r0, [pc, #16]	; (80004e0 <I2C_init+0x50>)
 80004ce:	f000 fe9b 	bl	8001208 <HAL_I2C_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <I2C_init+0x4c>
	{
	Error_Handler();
 80004d8:	f000 f89f 	bl	800061a <Error_Handler>
	}
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000394 	.word	0x20000394
 80004e4:	40005400 	.word	0x40005400
 80004e8:	000186a0 	.word	0x000186a0

080004ec <UART_init>:
	.Init.OverSampling = UART_OVERSAMPLING_16
};

static utils_buffer_t uart_buffer[UART_MAX];

bool UART_init(){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
	bool success = true;
 80004f2:	2301      	movs	r3, #1
 80004f4:	71fb      	strb	r3, [r7, #7]
	// Init hal
	success = (HAL_UART_Init(&huart2) != HAL_OK) && success;
 80004f6:	4837      	ldr	r0, [pc, #220]	; (80005d4 <UART_init+0xe8>)
 80004f8:	f001 fbda 	bl	8001cb0 <HAL_UART_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d004      	beq.n	800050c <UART_init+0x20>
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <UART_init+0x20>
 8000508:	2301      	movs	r3, #1
 800050a:	e000      	b.n	800050e <UART_init+0x22>
 800050c:	2300      	movs	r3, #0
 800050e:	71fb      	strb	r3, [r7, #7]
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	71fb      	strb	r3, [r7, #7]
	success = (HAL_UART_Init(&huart3) != HAL_OK) && success;
 8000518:	482f      	ldr	r0, [pc, #188]	; (80005d8 <UART_init+0xec>)
 800051a:	f001 fbc9 	bl	8001cb0 <HAL_UART_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d004      	beq.n	800052e <UART_init+0x42>
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <UART_init+0x42>
 800052a:	2301      	movs	r3, #1
 800052c:	e000      	b.n	8000530 <UART_init+0x44>
 800052e:	2300      	movs	r3, #0
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	f003 0301 	and.w	r3, r3, #1
 8000538:	71fb      	strb	r3, [r7, #7]
	success = (HAL_UART_Init(&huart4) != HAL_OK) && success;
 800053a:	4828      	ldr	r0, [pc, #160]	; (80005dc <UART_init+0xf0>)
 800053c:	f001 fbb8 	bl	8001cb0 <HAL_UART_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d004      	beq.n	8000550 <UART_init+0x64>
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <UART_init+0x64>
 800054c:	2301      	movs	r3, #1
 800054e:	e000      	b.n	8000552 <UART_init+0x66>
 8000550:	2300      	movs	r3, #0
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	71fb      	strb	r3, [r7, #7]
	// Init buffer
	success = utils_buffer_init(&uart_buffer[UART_2], sizeof(uint8_t)) && success;
 800055c:	2101      	movs	r1, #1
 800055e:	4820      	ldr	r0, [pc, #128]	; (80005e0 <UART_init+0xf4>)
 8000560:	f7ff fe60 	bl	8000224 <utils_buffer_init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d004      	beq.n	8000574 <UART_init+0x88>
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <UART_init+0x88>
 8000570:	2301      	movs	r3, #1
 8000572:	e000      	b.n	8000576 <UART_init+0x8a>
 8000574:	2300      	movs	r3, #0
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	71fb      	strb	r3, [r7, #7]
	success = utils_buffer_init(&uart_buffer[UART_3], sizeof(uint8_t)) && success;
 8000580:	2101      	movs	r1, #1
 8000582:	4818      	ldr	r0, [pc, #96]	; (80005e4 <UART_init+0xf8>)
 8000584:	f7ff fe4e 	bl	8000224 <utils_buffer_init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d004      	beq.n	8000598 <UART_init+0xac>
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <UART_init+0xac>
 8000594:	2301      	movs	r3, #1
 8000596:	e000      	b.n	800059a <UART_init+0xae>
 8000598:	2300      	movs	r3, #0
 800059a:	71fb      	strb	r3, [r7, #7]
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	71fb      	strb	r3, [r7, #7]
	success = utils_buffer_init(&uart_buffer[UART_4], sizeof(uint8_t)) && success;
 80005a4:	2101      	movs	r1, #1
 80005a6:	4810      	ldr	r0, [pc, #64]	; (80005e8 <UART_init+0xfc>)
 80005a8:	f7ff fe3c 	bl	8000224 <utils_buffer_init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d004      	beq.n	80005bc <UART_init+0xd0>
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <UART_init+0xd0>
 80005b8:	2301      	movs	r3, #1
 80005ba:	e000      	b.n	80005be <UART_init+0xd2>
 80005bc:	2300      	movs	r3, #0
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	71fb      	strb	r3, [r7, #7]
	return success;
 80005c8:	79fb      	ldrb	r3, [r7, #7]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000294 	.word	0x20000294
 80005d8:	200002dc 	.word	0x200002dc
 80005dc:	20000324 	.word	0x20000324
 80005e0:	200003e8 	.word	0x200003e8
 80005e4:	20000bf8 	.word	0x20000bf8
 80005e8:	20001408 	.word	0x20001408

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 f9c4 	bl	800097c <HAL_Init>

  /* USER CODE BEGIN Init */
  // Hal init
  CLOCK_init();
 80005f4:	f7ff fec2 	bl	800037c <CLOCK_init>
  GPIO_init();
 80005f8:	f7ff ff02 	bl	8000400 <GPIO_init>
  UART_init();
 80005fc:	f7ff ff76 	bl	80004ec <UART_init>
  I2C_init();
 8000600:	f7ff ff46 	bl	8000490 <I2C_init>
  // Device Init
  BILLACCEPTOR_init();
 8000604:	f7ff fe2e 	bl	8000264 <BILLACCEPTOR_init>
  EEPROM_init();
 8000608:	f7ff fe33 	bl	8000272 <EEPROM_init>
  TCD_init();
 800060c:	f7ff fe8c 	bl	8000328 <TCD_init>
  KEYPAD_init();
 8000610:	f7ff fe36 	bl	8000280 <KEYPAD_init>
  LCD_init();
 8000614:	f7ff fe5e 	bl	80002d4 <LCD_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x2c>

0800061a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061e:	b672      	cpsid	i
}
 8000620:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000622:	e7fe      	b.n	8000622 <Error_Handler+0x8>

08000624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <HAL_MspInit+0x40>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <HAL_MspInit+0x40>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6193      	str	r3, [r2, #24]
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <HAL_MspInit+0x40>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <HAL_MspInit+0x40>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a07      	ldr	r2, [pc, #28]	; (8000664 <HAL_MspInit+0x40>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_MspInit+0x40>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <HAL_I2C_MspInit+0x70>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d123      	bne.n	80006d0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <HAL_I2C_MspInit+0x74>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_I2C_MspInit+0x74>)
 800068e:	f043 0308 	orr.w	r3, r3, #8
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <HAL_I2C_MspInit+0x74>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0308 	and.w	r3, r3, #8
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006a0:	23c0      	movs	r3, #192	; 0xc0
 80006a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006a4:	2312      	movs	r3, #18
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <HAL_I2C_MspInit+0x78>)
 80006b4:	f000 fc14 	bl	8000ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <HAL_I2C_MspInit+0x74>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_I2C_MspInit+0x74>)
 80006be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c2:	61d3      	str	r3, [r2, #28]
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_I2C_MspInit+0x74>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40005400 	.word	0x40005400
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010c00 	.word	0x40010c00

080006e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a5f      	ldr	r2, [pc, #380]	; (800087c <HAL_UART_MspInit+0x198>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d13a      	bne.n	800077a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000704:	4b5e      	ldr	r3, [pc, #376]	; (8000880 <HAL_UART_MspInit+0x19c>)
 8000706:	69db      	ldr	r3, [r3, #28]
 8000708:	4a5d      	ldr	r2, [pc, #372]	; (8000880 <HAL_UART_MspInit+0x19c>)
 800070a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800070e:	61d3      	str	r3, [r2, #28]
 8000710:	4b5b      	ldr	r3, [pc, #364]	; (8000880 <HAL_UART_MspInit+0x19c>)
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000718:	61fb      	str	r3, [r7, #28]
 800071a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800071c:	4b58      	ldr	r3, [pc, #352]	; (8000880 <HAL_UART_MspInit+0x19c>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a57      	ldr	r2, [pc, #348]	; (8000880 <HAL_UART_MspInit+0x19c>)
 8000722:	f043 0310 	orr.w	r3, r3, #16
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b55      	ldr	r3, [pc, #340]	; (8000880 <HAL_UART_MspInit+0x19c>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0310 	and.w	r3, r3, #16
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	2302      	movs	r3, #2
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	4619      	mov	r1, r3
 8000748:	484e      	ldr	r0, [pc, #312]	; (8000884 <HAL_UART_MspInit+0x1a0>)
 800074a:	f000 fbc9 	bl	8000ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800074e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4619      	mov	r1, r3
 8000762:	4848      	ldr	r0, [pc, #288]	; (8000884 <HAL_UART_MspInit+0x1a0>)
 8000764:	f000 fbbc 	bl	8000ee0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2100      	movs	r1, #0
 800076c:	2034      	movs	r0, #52	; 0x34
 800076e:	f000 fa3e 	bl	8000bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000772:	2034      	movs	r0, #52	; 0x34
 8000774:	f000 fa57 	bl	8000c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000778:	e07c      	b.n	8000874 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a42      	ldr	r2, [pc, #264]	; (8000888 <HAL_UART_MspInit+0x1a4>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d138      	bne.n	80007f6 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000784:	4b3e      	ldr	r3, [pc, #248]	; (8000880 <HAL_UART_MspInit+0x19c>)
 8000786:	69db      	ldr	r3, [r3, #28]
 8000788:	4a3d      	ldr	r2, [pc, #244]	; (8000880 <HAL_UART_MspInit+0x19c>)
 800078a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078e:	61d3      	str	r3, [r2, #28]
 8000790:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <HAL_UART_MspInit+0x19c>)
 8000792:	69db      	ldr	r3, [r3, #28]
 8000794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	4b38      	ldr	r3, [pc, #224]	; (8000880 <HAL_UART_MspInit+0x19c>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a37      	ldr	r2, [pc, #220]	; (8000880 <HAL_UART_MspInit+0x19c>)
 80007a2:	f043 0304 	orr.w	r3, r3, #4
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b35      	ldr	r3, [pc, #212]	; (8000880 <HAL_UART_MspInit+0x19c>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0304 	and.w	r3, r3, #4
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007b4:	2304      	movs	r3, #4
 80007b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	4619      	mov	r1, r3
 80007c6:	4831      	ldr	r0, [pc, #196]	; (800088c <HAL_UART_MspInit+0x1a8>)
 80007c8:	f000 fb8a 	bl	8000ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007cc:	2308      	movs	r3, #8
 80007ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	4619      	mov	r1, r3
 80007de:	482b      	ldr	r0, [pc, #172]	; (800088c <HAL_UART_MspInit+0x1a8>)
 80007e0:	f000 fb7e 	bl	8000ee0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2100      	movs	r1, #0
 80007e8:	2026      	movs	r0, #38	; 0x26
 80007ea:	f000 fa00 	bl	8000bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007ee:	2026      	movs	r0, #38	; 0x26
 80007f0:	f000 fa19 	bl	8000c26 <HAL_NVIC_EnableIRQ>
}
 80007f4:	e03e      	b.n	8000874 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a25      	ldr	r2, [pc, #148]	; (8000890 <HAL_UART_MspInit+0x1ac>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d139      	bne.n	8000874 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <HAL_UART_MspInit+0x19c>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4a1e      	ldr	r2, [pc, #120]	; (8000880 <HAL_UART_MspInit+0x19c>)
 8000806:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800080a:	61d3      	str	r3, [r2, #28]
 800080c:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <HAL_UART_MspInit+0x19c>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <HAL_UART_MspInit+0x19c>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a18      	ldr	r2, [pc, #96]	; (8000880 <HAL_UART_MspInit+0x19c>)
 800081e:	f043 0308 	orr.w	r3, r3, #8
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <HAL_UART_MspInit+0x19c>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0308 	and.w	r3, r3, #8
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	4619      	mov	r1, r3
 8000844:	4813      	ldr	r0, [pc, #76]	; (8000894 <HAL_UART_MspInit+0x1b0>)
 8000846:	f000 fb4b 	bl	8000ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800084a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800084e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	4619      	mov	r1, r3
 800085e:	480d      	ldr	r0, [pc, #52]	; (8000894 <HAL_UART_MspInit+0x1b0>)
 8000860:	f000 fb3e 	bl	8000ee0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	2027      	movs	r0, #39	; 0x27
 800086a:	f000 f9c0 	bl	8000bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800086e:	2027      	movs	r0, #39	; 0x27
 8000870:	f000 f9d9 	bl	8000c26 <HAL_NVIC_EnableIRQ>
}
 8000874:	bf00      	nop
 8000876:	3730      	adds	r7, #48	; 0x30
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40004c00 	.word	0x40004c00
 8000880:	40021000 	.word	0x40021000
 8000884:	40011000 	.word	0x40011000
 8000888:	40004400 	.word	0x40004400
 800088c:	40010800 	.word	0x40010800
 8000890:	40004800 	.word	0x40004800
 8000894:	40010c00 	.word	0x40010c00

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008de:	f000 f893 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <USART2_IRQHandler+0x10>)
 80008ee:	f001 fa2f 	bl	8001d50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000294 	.word	0x20000294

080008fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <USART3_IRQHandler+0x10>)
 8000902:	f001 fa25 	bl	8001d50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200002dc 	.word	0x200002dc

08000910 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <UART4_IRQHandler+0x10>)
 8000916:	f001 fa1b 	bl	8001d50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000324 	.word	0x20000324

08000924 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000930:	f7ff fff8 	bl	8000924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000934:	480b      	ldr	r0, [pc, #44]	; (8000964 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000936:	490c      	ldr	r1, [pc, #48]	; (8000968 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000938:	4a0c      	ldr	r2, [pc, #48]	; (800096c <LoopFillZerobss+0x16>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a09      	ldr	r2, [pc, #36]	; (8000970 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800094c:	4c09      	ldr	r4, [pc, #36]	; (8000974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095a:	f001 fedb 	bl	8002714 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095e:	f7ff fe45 	bl	80005ec <main>
  bx lr
 8000962:	4770      	bx	lr
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 800096c:	080027b8 	.word	0x080027b8
  ldr r2, =_sbss
 8000970:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 8000974:	20001c1c 	.word	0x20001c1c

08000978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_Init+0x28>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_Init+0x28>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f923 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	200f      	movs	r0, #15
 8000994:	f000 f808 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff fe44 	bl	8000624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f93b 	bl	8000c42 <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e4:	f000 f903 	bl	8000bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000036c 	.word	0x2000036c
 8000a00:	20000374 	.word	0x20000374
 8000a04:	20000370 	.word	0x20000370

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a03      	ldr	r2, [pc, #12]	; (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000374 	.word	0x20000374
 8000a28:	20001c18 	.word	0x20001c18

08000a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	20001c18 	.word	0x20001c18

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4906      	ldr	r1, [pc, #24]	; (8000ad8 <__NVIC_EnableIRQ+0x34>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba4:	d301      	bcc.n	8000baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <SysTick_Config+0x40>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb8:	f7ff ff90 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <SysTick_Config+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SysTick_Config+0x40>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff2d 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff42 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff90 	bl	8000b30 <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff5f 	bl	8000adc <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff35 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffa2 	bl	8000b94 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b085      	sub	sp, #20
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d008      	beq.n	8000c84 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2204      	movs	r2, #4
 8000c76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e020      	b.n	8000cc6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 020e 	bic.w	r2, r2, #14
 8000c92:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f022 0201 	bic.w	r2, r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cac:	2101      	movs	r1, #1
 8000cae:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d005      	beq.n	8000cf4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2204      	movs	r2, #4
 8000cec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e0d6      	b.n	8000ea2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f022 020e 	bic.w	r2, r2, #14
 8000d02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f022 0201 	bic.w	r2, r2, #1
 8000d12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b64      	ldr	r3, [pc, #400]	; (8000eac <HAL_DMA_Abort_IT+0x1dc>)
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d958      	bls.n	8000dd2 <HAL_DMA_Abort_IT+0x102>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a62      	ldr	r2, [pc, #392]	; (8000eb0 <HAL_DMA_Abort_IT+0x1e0>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d04f      	beq.n	8000dca <HAL_DMA_Abort_IT+0xfa>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a61      	ldr	r2, [pc, #388]	; (8000eb4 <HAL_DMA_Abort_IT+0x1e4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d048      	beq.n	8000dc6 <HAL_DMA_Abort_IT+0xf6>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a5f      	ldr	r2, [pc, #380]	; (8000eb8 <HAL_DMA_Abort_IT+0x1e8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d040      	beq.n	8000dc0 <HAL_DMA_Abort_IT+0xf0>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a5e      	ldr	r2, [pc, #376]	; (8000ebc <HAL_DMA_Abort_IT+0x1ec>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d038      	beq.n	8000dba <HAL_DMA_Abort_IT+0xea>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a5c      	ldr	r2, [pc, #368]	; (8000ec0 <HAL_DMA_Abort_IT+0x1f0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d030      	beq.n	8000db4 <HAL_DMA_Abort_IT+0xe4>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a5b      	ldr	r2, [pc, #364]	; (8000ec4 <HAL_DMA_Abort_IT+0x1f4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d028      	beq.n	8000dae <HAL_DMA_Abort_IT+0xde>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a52      	ldr	r2, [pc, #328]	; (8000eac <HAL_DMA_Abort_IT+0x1dc>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d020      	beq.n	8000da8 <HAL_DMA_Abort_IT+0xd8>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a57      	ldr	r2, [pc, #348]	; (8000ec8 <HAL_DMA_Abort_IT+0x1f8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d019      	beq.n	8000da4 <HAL_DMA_Abort_IT+0xd4>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a55      	ldr	r2, [pc, #340]	; (8000ecc <HAL_DMA_Abort_IT+0x1fc>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d012      	beq.n	8000da0 <HAL_DMA_Abort_IT+0xd0>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a54      	ldr	r2, [pc, #336]	; (8000ed0 <HAL_DMA_Abort_IT+0x200>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d00a      	beq.n	8000d9a <HAL_DMA_Abort_IT+0xca>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a52      	ldr	r2, [pc, #328]	; (8000ed4 <HAL_DMA_Abort_IT+0x204>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d102      	bne.n	8000d94 <HAL_DMA_Abort_IT+0xc4>
 8000d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d92:	e01b      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d98:	e018      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9e:	e015      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000da0:	2310      	movs	r3, #16
 8000da2:	e013      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000da4:	2301      	movs	r3, #1
 8000da6:	e011      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dac:	e00e      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000dae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000db2:	e00b      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db8:	e008      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dbe:	e005      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc4:	e002      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	e000      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	4a42      	ldr	r2, [pc, #264]	; (8000ed8 <HAL_DMA_Abort_IT+0x208>)
 8000dce:	6053      	str	r3, [r2, #4]
 8000dd0:	e057      	b.n	8000e82 <HAL_DMA_Abort_IT+0x1b2>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a36      	ldr	r2, [pc, #216]	; (8000eb0 <HAL_DMA_Abort_IT+0x1e0>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d04f      	beq.n	8000e7c <HAL_DMA_Abort_IT+0x1ac>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a34      	ldr	r2, [pc, #208]	; (8000eb4 <HAL_DMA_Abort_IT+0x1e4>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d048      	beq.n	8000e78 <HAL_DMA_Abort_IT+0x1a8>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <HAL_DMA_Abort_IT+0x1e8>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d040      	beq.n	8000e72 <HAL_DMA_Abort_IT+0x1a2>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a31      	ldr	r2, [pc, #196]	; (8000ebc <HAL_DMA_Abort_IT+0x1ec>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d038      	beq.n	8000e6c <HAL_DMA_Abort_IT+0x19c>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a30      	ldr	r2, [pc, #192]	; (8000ec0 <HAL_DMA_Abort_IT+0x1f0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d030      	beq.n	8000e66 <HAL_DMA_Abort_IT+0x196>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a2e      	ldr	r2, [pc, #184]	; (8000ec4 <HAL_DMA_Abort_IT+0x1f4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d028      	beq.n	8000e60 <HAL_DMA_Abort_IT+0x190>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a26      	ldr	r2, [pc, #152]	; (8000eac <HAL_DMA_Abort_IT+0x1dc>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d020      	beq.n	8000e5a <HAL_DMA_Abort_IT+0x18a>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a2a      	ldr	r2, [pc, #168]	; (8000ec8 <HAL_DMA_Abort_IT+0x1f8>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d019      	beq.n	8000e56 <HAL_DMA_Abort_IT+0x186>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a29      	ldr	r2, [pc, #164]	; (8000ecc <HAL_DMA_Abort_IT+0x1fc>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d012      	beq.n	8000e52 <HAL_DMA_Abort_IT+0x182>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <HAL_DMA_Abort_IT+0x200>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00a      	beq.n	8000e4c <HAL_DMA_Abort_IT+0x17c>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a26      	ldr	r2, [pc, #152]	; (8000ed4 <HAL_DMA_Abort_IT+0x204>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d102      	bne.n	8000e46 <HAL_DMA_Abort_IT+0x176>
 8000e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e44:	e01b      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e4a:	e018      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e50:	e015      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e52:	2310      	movs	r3, #16
 8000e54:	e013      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e011      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e5e:	e00e      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e64:	e00b      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6a:	e008      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e70:	e005      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e76:	e002      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e78:	2310      	movs	r3, #16
 8000e7a:	e000      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	4a17      	ldr	r2, [pc, #92]	; (8000edc <HAL_DMA_Abort_IT+0x20c>)
 8000e80:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	4798      	blx	r3
    } 
  }
  return status;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40020080 	.word	0x40020080
 8000eb0:	40020008 	.word	0x40020008
 8000eb4:	4002001c 	.word	0x4002001c
 8000eb8:	40020030 	.word	0x40020030
 8000ebc:	40020044 	.word	0x40020044
 8000ec0:	40020058 	.word	0x40020058
 8000ec4:	4002006c 	.word	0x4002006c
 8000ec8:	40020408 	.word	0x40020408
 8000ecc:	4002041c 	.word	0x4002041c
 8000ed0:	40020430 	.word	0x40020430
 8000ed4:	40020444 	.word	0x40020444
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40020000 	.word	0x40020000

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b08b      	sub	sp, #44	; 0x2c
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef2:	e179      	b.n	80011e8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 8168 	bne.w	80011e2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4a96      	ldr	r2, [pc, #600]	; (8001170 <HAL_GPIO_Init+0x290>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d05e      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f1c:	4a94      	ldr	r2, [pc, #592]	; (8001170 <HAL_GPIO_Init+0x290>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d875      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f22:	4a94      	ldr	r2, [pc, #592]	; (8001174 <HAL_GPIO_Init+0x294>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d058      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f28:	4a92      	ldr	r2, [pc, #584]	; (8001174 <HAL_GPIO_Init+0x294>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d86f      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f2e:	4a92      	ldr	r2, [pc, #584]	; (8001178 <HAL_GPIO_Init+0x298>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d052      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f34:	4a90      	ldr	r2, [pc, #576]	; (8001178 <HAL_GPIO_Init+0x298>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d869      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f3a:	4a90      	ldr	r2, [pc, #576]	; (800117c <HAL_GPIO_Init+0x29c>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d04c      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f40:	4a8e      	ldr	r2, [pc, #568]	; (800117c <HAL_GPIO_Init+0x29c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d863      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f46:	4a8e      	ldr	r2, [pc, #568]	; (8001180 <HAL_GPIO_Init+0x2a0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d046      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f4c:	4a8c      	ldr	r2, [pc, #560]	; (8001180 <HAL_GPIO_Init+0x2a0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d85d      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f52:	2b12      	cmp	r3, #18
 8000f54:	d82a      	bhi.n	8000fac <HAL_GPIO_Init+0xcc>
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d859      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f5a:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <HAL_GPIO_Init+0x80>)
 8000f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f60:	08000fdb 	.word	0x08000fdb
 8000f64:	08000fb5 	.word	0x08000fb5
 8000f68:	08000fc7 	.word	0x08000fc7
 8000f6c:	08001009 	.word	0x08001009
 8000f70:	0800100f 	.word	0x0800100f
 8000f74:	0800100f 	.word	0x0800100f
 8000f78:	0800100f 	.word	0x0800100f
 8000f7c:	0800100f 	.word	0x0800100f
 8000f80:	0800100f 	.word	0x0800100f
 8000f84:	0800100f 	.word	0x0800100f
 8000f88:	0800100f 	.word	0x0800100f
 8000f8c:	0800100f 	.word	0x0800100f
 8000f90:	0800100f 	.word	0x0800100f
 8000f94:	0800100f 	.word	0x0800100f
 8000f98:	0800100f 	.word	0x0800100f
 8000f9c:	0800100f 	.word	0x0800100f
 8000fa0:	0800100f 	.word	0x0800100f
 8000fa4:	08000fbd 	.word	0x08000fbd
 8000fa8:	08000fd1 	.word	0x08000fd1
 8000fac:	4a75      	ldr	r2, [pc, #468]	; (8001184 <HAL_GPIO_Init+0x2a4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fb2:	e02c      	b.n	800100e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	623b      	str	r3, [r7, #32]
          break;
 8000fba:	e029      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	623b      	str	r3, [r7, #32]
          break;
 8000fc4:	e024      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	3308      	adds	r3, #8
 8000fcc:	623b      	str	r3, [r7, #32]
          break;
 8000fce:	e01f      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	330c      	adds	r3, #12
 8000fd6:	623b      	str	r3, [r7, #32]
          break;
 8000fd8:	e01a      	b.n	8001010 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d102      	bne.n	8000fe8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	623b      	str	r3, [r7, #32]
          break;
 8000fe6:	e013      	b.n	8001010 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d105      	bne.n	8000ffc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	611a      	str	r2, [r3, #16]
          break;
 8000ffa:	e009      	b.n	8001010 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	615a      	str	r2, [r3, #20]
          break;
 8001006:	e003      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
          break;
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x130>
          break;
 800100e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	2bff      	cmp	r3, #255	; 0xff
 8001014:	d801      	bhi.n	800101a <HAL_GPIO_Init+0x13a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	e001      	b.n	800101e <HAL_GPIO_Init+0x13e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3304      	adds	r3, #4
 800101e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2bff      	cmp	r3, #255	; 0xff
 8001024:	d802      	bhi.n	800102c <HAL_GPIO_Init+0x14c>
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	e002      	b.n	8001032 <HAL_GPIO_Init+0x152>
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	3b08      	subs	r3, #8
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	210f      	movs	r1, #15
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	401a      	ands	r2, r3
 8001044:	6a39      	ldr	r1, [r7, #32]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 80c1 	beq.w	80011e2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001060:	4b49      	ldr	r3, [pc, #292]	; (8001188 <HAL_GPIO_Init+0x2a8>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a48      	ldr	r2, [pc, #288]	; (8001188 <HAL_GPIO_Init+0x2a8>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b46      	ldr	r3, [pc, #280]	; (8001188 <HAL_GPIO_Init+0x2a8>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001078:	4a44      	ldr	r2, [pc, #272]	; (800118c <HAL_GPIO_Init+0x2ac>)
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a3c      	ldr	r2, [pc, #240]	; (8001190 <HAL_GPIO_Init+0x2b0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d01f      	beq.n	80010e4 <HAL_GPIO_Init+0x204>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a3b      	ldr	r2, [pc, #236]	; (8001194 <HAL_GPIO_Init+0x2b4>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d019      	beq.n	80010e0 <HAL_GPIO_Init+0x200>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a3a      	ldr	r2, [pc, #232]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_GPIO_Init+0x1fc>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a39      	ldr	r2, [pc, #228]	; (800119c <HAL_GPIO_Init+0x2bc>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1f8>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a38      	ldr	r2, [pc, #224]	; (80011a0 <HAL_GPIO_Init+0x2c0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1f4>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a37      	ldr	r2, [pc, #220]	; (80011a4 <HAL_GPIO_Init+0x2c4>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1f0>
 80010cc:	2305      	movs	r3, #5
 80010ce:	e00a      	b.n	80010e6 <HAL_GPIO_Init+0x206>
 80010d0:	2306      	movs	r3, #6
 80010d2:	e008      	b.n	80010e6 <HAL_GPIO_Init+0x206>
 80010d4:	2304      	movs	r3, #4
 80010d6:	e006      	b.n	80010e6 <HAL_GPIO_Init+0x206>
 80010d8:	2303      	movs	r3, #3
 80010da:	e004      	b.n	80010e6 <HAL_GPIO_Init+0x206>
 80010dc:	2302      	movs	r3, #2
 80010de:	e002      	b.n	80010e6 <HAL_GPIO_Init+0x206>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <HAL_GPIO_Init+0x206>
 80010e4:	2300      	movs	r3, #0
 80010e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e8:	f002 0203 	and.w	r2, r2, #3
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	4093      	lsls	r3, r2
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010f6:	4925      	ldr	r1, [pc, #148]	; (800118c <HAL_GPIO_Init+0x2ac>)
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d006      	beq.n	800111e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	4924      	ldr	r1, [pc, #144]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	608b      	str	r3, [r1, #8]
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800111e:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	43db      	mvns	r3, r3
 8001126:	4920      	ldr	r1, [pc, #128]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001128:	4013      	ands	r3, r2
 800112a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	491a      	ldr	r1, [pc, #104]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	60cb      	str	r3, [r1, #12]
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	43db      	mvns	r3, r3
 800114e:	4916      	ldr	r1, [pc, #88]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001150:	4013      	ands	r3, r2
 8001152:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d025      	beq.n	80011ac <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	4910      	ldr	r1, [pc, #64]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
 800116c:	e025      	b.n	80011ba <HAL_GPIO_Init+0x2da>
 800116e:	bf00      	nop
 8001170:	10320000 	.word	0x10320000
 8001174:	10310000 	.word	0x10310000
 8001178:	10220000 	.word	0x10220000
 800117c:	10210000 	.word	0x10210000
 8001180:	10120000 	.word	0x10120000
 8001184:	10110000 	.word	0x10110000
 8001188:	40021000 	.word	0x40021000
 800118c:	40010000 	.word	0x40010000
 8001190:	40010800 	.word	0x40010800
 8001194:	40010c00 	.word	0x40010c00
 8001198:	40011000 	.word	0x40011000
 800119c:	40011400 	.word	0x40011400
 80011a0:	40011800 	.word	0x40011800
 80011a4:	40011c00 	.word	0x40011c00
 80011a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_GPIO_Init+0x324>)
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	4913      	ldr	r1, [pc, #76]	; (8001204 <HAL_GPIO_Init+0x324>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_GPIO_Init+0x324>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	490e      	ldr	r1, [pc, #56]	; (8001204 <HAL_GPIO_Init+0x324>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
 80011d2:	e006      	b.n	80011e2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_GPIO_Init+0x324>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	43db      	mvns	r3, r3
 80011dc:	4909      	ldr	r1, [pc, #36]	; (8001204 <HAL_GPIO_Init+0x324>)
 80011de:	4013      	ands	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	3301      	adds	r3, #1
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	fa22 f303 	lsr.w	r3, r2, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f47f ae7e 	bne.w	8000ef4 <HAL_GPIO_Init+0x14>
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	372c      	adds	r7, #44	; 0x2c
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	40010400 	.word	0x40010400

08001208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e12b      	b.n	8001472 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d106      	bne.n	8001234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fa1a 	bl	8000668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2224      	movs	r2, #36	; 0x24
 8001238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0201 	bic.w	r2, r2, #1
 800124a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800125a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800126a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800126c:	f000 fcda 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 8001270:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a81      	ldr	r2, [pc, #516]	; (800147c <HAL_I2C_Init+0x274>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d807      	bhi.n	800128c <HAL_I2C_Init+0x84>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4a80      	ldr	r2, [pc, #512]	; (8001480 <HAL_I2C_Init+0x278>)
 8001280:	4293      	cmp	r3, r2
 8001282:	bf94      	ite	ls
 8001284:	2301      	movls	r3, #1
 8001286:	2300      	movhi	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	e006      	b.n	800129a <HAL_I2C_Init+0x92>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4a7d      	ldr	r2, [pc, #500]	; (8001484 <HAL_I2C_Init+0x27c>)
 8001290:	4293      	cmp	r3, r2
 8001292:	bf94      	ite	ls
 8001294:	2301      	movls	r3, #1
 8001296:	2300      	movhi	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e0e7      	b.n	8001472 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4a78      	ldr	r2, [pc, #480]	; (8001488 <HAL_I2C_Init+0x280>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	0c9b      	lsrs	r3, r3, #18
 80012ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	430a      	orrs	r2, r1
 80012c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4a6a      	ldr	r2, [pc, #424]	; (800147c <HAL_I2C_Init+0x274>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d802      	bhi.n	80012dc <HAL_I2C_Init+0xd4>
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	3301      	adds	r3, #1
 80012da:	e009      	b.n	80012f0 <HAL_I2C_Init+0xe8>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	4a69      	ldr	r2, [pc, #420]	; (800148c <HAL_I2C_Init+0x284>)
 80012e8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ec:	099b      	lsrs	r3, r3, #6
 80012ee:	3301      	adds	r3, #1
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	430b      	orrs	r3, r1
 80012f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001302:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	495c      	ldr	r1, [pc, #368]	; (800147c <HAL_I2C_Init+0x274>)
 800130c:	428b      	cmp	r3, r1
 800130e:	d819      	bhi.n	8001344 <HAL_I2C_Init+0x13c>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1e59      	subs	r1, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fbb1 f3f3 	udiv	r3, r1, r3
 800131e:	1c59      	adds	r1, r3, #1
 8001320:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001324:	400b      	ands	r3, r1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00a      	beq.n	8001340 <HAL_I2C_Init+0x138>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1e59      	subs	r1, r3, #1
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fbb1 f3f3 	udiv	r3, r1, r3
 8001338:	3301      	adds	r3, #1
 800133a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800133e:	e051      	b.n	80013e4 <HAL_I2C_Init+0x1dc>
 8001340:	2304      	movs	r3, #4
 8001342:	e04f      	b.n	80013e4 <HAL_I2C_Init+0x1dc>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d111      	bne.n	8001370 <HAL_I2C_Init+0x168>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	1e58      	subs	r0, r3, #1
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6859      	ldr	r1, [r3, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	440b      	add	r3, r1
 800135a:	fbb0 f3f3 	udiv	r3, r0, r3
 800135e:	3301      	adds	r3, #1
 8001360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001364:	2b00      	cmp	r3, #0
 8001366:	bf0c      	ite	eq
 8001368:	2301      	moveq	r3, #1
 800136a:	2300      	movne	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	e012      	b.n	8001396 <HAL_I2C_Init+0x18e>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1e58      	subs	r0, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6859      	ldr	r1, [r3, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	0099      	lsls	r1, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	fbb0 f3f3 	udiv	r3, r0, r3
 8001386:	3301      	adds	r3, #1
 8001388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138c:	2b00      	cmp	r3, #0
 800138e:	bf0c      	ite	eq
 8001390:	2301      	moveq	r3, #1
 8001392:	2300      	movne	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_I2C_Init+0x196>
 800139a:	2301      	movs	r3, #1
 800139c:	e022      	b.n	80013e4 <HAL_I2C_Init+0x1dc>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10e      	bne.n	80013c4 <HAL_I2C_Init+0x1bc>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	1e58      	subs	r0, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6859      	ldr	r1, [r3, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	440b      	add	r3, r1
 80013b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80013b8:	3301      	adds	r3, #1
 80013ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013c2:	e00f      	b.n	80013e4 <HAL_I2C_Init+0x1dc>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	1e58      	subs	r0, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	0099      	lsls	r1, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013da:	3301      	adds	r3, #1
 80013dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	6809      	ldr	r1, [r1, #0]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69da      	ldr	r2, [r3, #28]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001412:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6911      	ldr	r1, [r2, #16]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68d2      	ldr	r2, [r2, #12]
 800141e:	4311      	orrs	r1, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	430b      	orrs	r3, r1
 8001426:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2220      	movs	r2, #32
 800145e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	000186a0 	.word	0x000186a0
 8001480:	001e847f 	.word	0x001e847f
 8001484:	003d08ff 	.word	0x003d08ff
 8001488:	431bde83 	.word	0x431bde83
 800148c:	10624dd3 	.word	0x10624dd3

08001490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e272      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8087 	beq.w	80015be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b0:	4b92      	ldr	r3, [pc, #584]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d00c      	beq.n	80014d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014bc:	4b8f      	ldr	r3, [pc, #572]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d112      	bne.n	80014ee <HAL_RCC_OscConfig+0x5e>
 80014c8:	4b8c      	ldr	r3, [pc, #560]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d4:	d10b      	bne.n	80014ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d6:	4b89      	ldr	r3, [pc, #548]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d06c      	beq.n	80015bc <HAL_RCC_OscConfig+0x12c>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d168      	bne.n	80015bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e24c      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x76>
 80014f8:	4b80      	ldr	r3, [pc, #512]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a7f      	ldr	r2, [pc, #508]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	e02e      	b.n	8001564 <HAL_RCC_OscConfig+0xd4>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x98>
 800150e:	4b7b      	ldr	r3, [pc, #492]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a7a      	ldr	r2, [pc, #488]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b78      	ldr	r3, [pc, #480]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a77      	ldr	r2, [pc, #476]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0xd4>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0xbc>
 8001532:	4b72      	ldr	r3, [pc, #456]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a71      	ldr	r2, [pc, #452]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b6f      	ldr	r3, [pc, #444]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6e      	ldr	r2, [pc, #440]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0xd4>
 800154c:	4b6b      	ldr	r3, [pc, #428]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a6a      	ldr	r2, [pc, #424]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b68      	ldr	r3, [pc, #416]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a67      	ldr	r2, [pc, #412]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001562:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fa5e 	bl	8000a2c <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fa5a 	bl	8000a2c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e200      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0xe4>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fa4a 	bl	8000a2c <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fa46 	bl	8000a2c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1ec      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	4b53      	ldr	r3, [pc, #332]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x10c>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d063      	beq.n	8001692 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ca:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015d6:	4b49      	ldr	r3, [pc, #292]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d11c      	bne.n	800161c <HAL_RCC_OscConfig+0x18c>
 80015e2:	4b46      	ldr	r3, [pc, #280]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d116      	bne.n	800161c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	4b43      	ldr	r3, [pc, #268]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x176>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e1c0      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4939      	ldr	r1, [pc, #228]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	e03a      	b.n	8001692 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <HAL_RCC_OscConfig+0x270>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff f9ff 	bl	8000a2c <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff f9fb 	bl	8000a2c <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e1a1      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4927      	ldr	r1, [pc, #156]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <HAL_RCC_OscConfig+0x270>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff f9de 	bl	8000a2c <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff f9da 	bl	8000a2c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e180      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d03a      	beq.n	8001714 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d019      	beq.n	80016da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_RCC_OscConfig+0x274>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7ff f9be 	bl	8000a2c <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff f9ba 	bl	8000a2c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e160      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f000 face 	bl	8001c74 <RCC_Delay>
 80016d8:	e01c      	b.n	8001714 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_RCC_OscConfig+0x274>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e0:	f7ff f9a4 	bl	8000a2c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e6:	e00f      	b.n	8001708 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e8:	f7ff f9a0 	bl	8000a2c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d908      	bls.n	8001708 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e146      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	42420000 	.word	0x42420000
 8001704:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001708:	4b92      	ldr	r3, [pc, #584]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e9      	bne.n	80016e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80a6 	beq.w	800186e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001726:	4b8b      	ldr	r3, [pc, #556]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10d      	bne.n	800174e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b88      	ldr	r3, [pc, #544]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a87      	ldr	r2, [pc, #540]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	61d3      	str	r3, [r2, #28]
 800173e:	4b85      	ldr	r3, [pc, #532]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174a:	2301      	movs	r3, #1
 800174c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174e:	4b82      	ldr	r3, [pc, #520]	; (8001958 <HAL_RCC_OscConfig+0x4c8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d118      	bne.n	800178c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175a:	4b7f      	ldr	r3, [pc, #508]	; (8001958 <HAL_RCC_OscConfig+0x4c8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a7e      	ldr	r2, [pc, #504]	; (8001958 <HAL_RCC_OscConfig+0x4c8>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001766:	f7ff f961 	bl	8000a2c <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176e:	f7ff f95d 	bl	8000a2c <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b64      	cmp	r3, #100	; 0x64
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e103      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	4b75      	ldr	r3, [pc, #468]	; (8001958 <HAL_RCC_OscConfig+0x4c8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x312>
 8001794:	4b6f      	ldr	r3, [pc, #444]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4a6e      	ldr	r2, [pc, #440]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6213      	str	r3, [r2, #32]
 80017a0:	e02d      	b.n	80017fe <HAL_RCC_OscConfig+0x36e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x334>
 80017aa:	4b6a      	ldr	r3, [pc, #424]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	4a69      	ldr	r2, [pc, #420]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6213      	str	r3, [r2, #32]
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a66      	ldr	r2, [pc, #408]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	f023 0304 	bic.w	r3, r3, #4
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	e01c      	b.n	80017fe <HAL_RCC_OscConfig+0x36e>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d10c      	bne.n	80017e6 <HAL_RCC_OscConfig+0x356>
 80017cc:	4b61      	ldr	r3, [pc, #388]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4a60      	ldr	r2, [pc, #384]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6213      	str	r3, [r2, #32]
 80017d8:	4b5e      	ldr	r3, [pc, #376]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a5d      	ldr	r2, [pc, #372]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	e00b      	b.n	80017fe <HAL_RCC_OscConfig+0x36e>
 80017e6:	4b5b      	ldr	r3, [pc, #364]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	4a5a      	ldr	r2, [pc, #360]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	6213      	str	r3, [r2, #32]
 80017f2:	4b58      	ldr	r3, [pc, #352]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4a57      	ldr	r2, [pc, #348]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	f023 0304 	bic.w	r3, r3, #4
 80017fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d015      	beq.n	8001832 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001806:	f7ff f911 	bl	8000a2c <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180c:	e00a      	b.n	8001824 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff f90d 	bl	8000a2c <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	; 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e0b1      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	4b4b      	ldr	r3, [pc, #300]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0ee      	beq.n	800180e <HAL_RCC_OscConfig+0x37e>
 8001830:	e014      	b.n	800185c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7ff f8fb 	bl	8000a2c <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff f8f7 	bl	8000a2c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	; 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e09b      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	4b40      	ldr	r3, [pc, #256]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1ee      	bne.n	800183a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d105      	bne.n	800186e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001862:	4b3c      	ldr	r3, [pc, #240]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a3b      	ldr	r2, [pc, #236]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8087 	beq.w	8001986 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001878:	4b36      	ldr	r3, [pc, #216]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b08      	cmp	r3, #8
 8001882:	d061      	beq.n	8001948 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d146      	bne.n	800191a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188c:	4b33      	ldr	r3, [pc, #204]	; (800195c <HAL_RCC_OscConfig+0x4cc>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff f8cb 	bl	8000a2c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189a:	f7ff f8c7 	bl	8000a2c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e06d      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ac:	4b29      	ldr	r3, [pc, #164]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c0:	d108      	bne.n	80018d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018c2:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	4921      	ldr	r1, [pc, #132]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d4:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a19      	ldr	r1, [r3, #32]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	430b      	orrs	r3, r1
 80018e6:	491b      	ldr	r1, [pc, #108]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_RCC_OscConfig+0x4cc>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff f89b 	bl	8000a2c <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff f897 	bl	8000a2c <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e03d      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x46a>
 8001918:	e035      	b.n	8001986 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_RCC_OscConfig+0x4cc>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff f884 	bl	8000a2c <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff f880 	bl	8000a2c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e026      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x498>
 8001946:	e01e      	b.n	8001986 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d107      	bne.n	8001960 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e019      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
 8001954:	40021000 	.word	0x40021000
 8001958:	40007000 	.word	0x40007000
 800195c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_RCC_OscConfig+0x500>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	429a      	cmp	r2, r3
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0d0      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b6a      	ldr	r3, [pc, #424]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d910      	bls.n	80019d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b67      	ldr	r3, [pc, #412]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 0207 	bic.w	r2, r3, #7
 80019be:	4965      	ldr	r1, [pc, #404]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b63      	ldr	r3, [pc, #396]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0b8      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d020      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f0:	4b59      	ldr	r3, [pc, #356]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	4a58      	ldr	r2, [pc, #352]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a08:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a52      	ldr	r2, [pc, #328]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a14:	4b50      	ldr	r3, [pc, #320]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	494d      	ldr	r1, [pc, #308]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d040      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d115      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e07f      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b41      	ldr	r3, [pc, #260]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e073      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06b      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a72:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f023 0203 	bic.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4936      	ldr	r1, [pc, #216]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a84:	f7fe ffd2 	bl	8000a2c <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8c:	f7fe ffce 	bl	8000a2c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e053      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 020c 	and.w	r2, r3, #12
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1eb      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d210      	bcs.n	8001ae4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 0207 	bic.w	r2, r3, #7
 8001aca:	4922      	ldr	r1, [pc, #136]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e032      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4916      	ldr	r1, [pc, #88]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	490e      	ldr	r1, [pc, #56]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b22:	f000 f821 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001b26:	4602      	mov	r2, r0
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	490a      	ldr	r1, [pc, #40]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	5ccb      	ldrb	r3, [r1, r3]
 8001b36:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <HAL_RCC_ClockConfig+0x1cc>)
 8001b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_RCC_ClockConfig+0x1d0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe ff30 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	08002784 	.word	0x08002784
 8001b60:	2000036c 	.word	0x2000036c
 8001b64:	20000370 	.word	0x20000370

08001b68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x94>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d002      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x30>
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0x36>
 8001b96:	e027      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b9a:	613b      	str	r3, [r7, #16]
      break;
 8001b9c:	e027      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	0c9b      	lsrs	r3, r3, #18
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ba8:	5cd3      	ldrb	r3, [r2, r3]
 8001baa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d010      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x94>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	0c5b      	lsrs	r3, r3, #17
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bca:	fb03 f202 	mul.w	r2, r3, r2
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e004      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	613b      	str	r3, [r7, #16]
      break;
 8001be6:	e002      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bea:	613b      	str	r3, [r7, #16]
      break;
 8001bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bee:	693b      	ldr	r3, [r7, #16]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	371c      	adds	r7, #28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	007a1200 	.word	0x007a1200
 8001c04:	0800279c 	.word	0x0800279c
 8001c08:	080027ac 	.word	0x080027ac
 8001c0c:	003d0900 	.word	0x003d0900

08001c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	2000036c 	.word	0x2000036c

08001c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c28:	f7ff fff2 	bl	8001c10 <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	08002794 	.word	0x08002794

08001c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_RCC_GetHCLKFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	0adb      	lsrs	r3, r3, #11
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	4903      	ldr	r1, [pc, #12]	; (8001c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	08002794 	.word	0x08002794

08001c74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <RCC_Delay+0x34>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <RCC_Delay+0x38>)
 8001c82:	fba2 2303 	umull	r2, r3, r2, r3
 8001c86:	0a5b      	lsrs	r3, r3, #9
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c90:	bf00      	nop
  }
  while (Delay --);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	60fa      	str	r2, [r7, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f9      	bne.n	8001c90 <RCC_Delay+0x1c>
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	2000036c 	.word	0x2000036c
 8001cac:	10624dd3 	.word	0x10624dd3

08001cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e042      	b.n	8001d48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe fd04 	bl	80006e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2224      	movs	r2, #36	; 0x24
 8001ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 fc7f 	bl	80025f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2220      	movs	r2, #32
 8001d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0ba      	sub	sp, #232	; 0xe8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10f      	bne.n	8001db6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d009      	beq.n	8001db6 <HAL_UART_IRQHandler+0x66>
 8001da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fb63 	bl	800247a <UART_Receive_IT>
      return;
 8001db4:	e25b      	b.n	800226e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001db6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80de 	beq.w	8001f7c <HAL_UART_IRQHandler+0x22c>
 8001dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d106      	bne.n	8001dda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dd0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80d1 	beq.w	8001f7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <HAL_UART_IRQHandler+0xae>
 8001de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HAL_UART_IRQHandler+0xd2>
 8001e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f043 0202 	orr.w	r2, r3, #2
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_UART_IRQHandler+0xf6>
 8001e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f043 0204 	orr.w	r2, r3, #4
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d011      	beq.n	8001e76 <HAL_UART_IRQHandler+0x126>
 8001e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d105      	bne.n	8001e6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f043 0208 	orr.w	r2, r3, #8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 81f2 	beq.w	8002264 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_UART_IRQHandler+0x14e>
 8001e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 faee 	bl	800247a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf14      	ite	ne
 8001eac:	2301      	movne	r3, #1
 8001eae:	2300      	moveq	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <HAL_UART_IRQHandler+0x17a>
 8001ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d04f      	beq.n	8001f6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f9f8 	bl	80022c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d041      	beq.n	8001f62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3314      	adds	r3, #20
 8001ee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eec:	e853 3f00 	ldrex	r3, [r3]
 8001ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3314      	adds	r3, #20
 8001f06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f1a:	e841 2300 	strex	r3, r2, [r1]
 8001f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1d9      	bne.n	8001ede <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d013      	beq.n	8001f5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f36:	4a7e      	ldr	r2, [pc, #504]	; (8002130 <HAL_UART_IRQHandler+0x3e0>)
 8001f38:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fec6 	bl	8000cd0 <HAL_DMA_Abort_IT>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d016      	beq.n	8001f78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f54:	4610      	mov	r0, r2
 8001f56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f58:	e00e      	b.n	8001f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f99c 	bl	8002298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f60:	e00a      	b.n	8001f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f998 	bl	8002298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f68:	e006      	b.n	8001f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f994 	bl	8002298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001f76:	e175      	b.n	8002264 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f78:	bf00      	nop
    return;
 8001f7a:	e173      	b.n	8002264 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	f040 814f 	bne.w	8002224 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8148 	beq.w	8002224 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 8141 	beq.w	8002224 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80b6 	beq.w	8002134 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001fd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 8145 	beq.w	8002268 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	f080 813e 	bcs.w	8002268 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001ff2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	f000 8088 	beq.w	8002110 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	330c      	adds	r3, #12
 8002006:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800200a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800200e:	e853 3f00 	ldrex	r3, [r3]
 8002012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002016:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800201a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800201e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	330c      	adds	r3, #12
 8002028:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800202c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002030:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002034:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002038:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800203c:	e841 2300 	strex	r3, r2, [r1]
 8002040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1d9      	bne.n	8002000 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	3314      	adds	r3, #20
 8002052:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002056:	e853 3f00 	ldrex	r3, [r3]
 800205a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800205c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	3314      	adds	r3, #20
 800206c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002070:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002074:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002076:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002078:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800207c:	e841 2300 	strex	r3, r2, [r1]
 8002080:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e1      	bne.n	800204c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	3314      	adds	r3, #20
 800208e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002092:	e853 3f00 	ldrex	r3, [r3]
 8002096:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800209a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800209e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3314      	adds	r3, #20
 80020a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80020ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80020b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020b4:	e841 2300 	strex	r3, r2, [r1]
 80020b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80020ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1e3      	bne.n	8002088 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	330c      	adds	r3, #12
 80020d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020d8:	e853 3f00 	ldrex	r3, [r3]
 80020dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80020de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e0:	f023 0310 	bic.w	r3, r3, #16
 80020e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	330c      	adds	r3, #12
 80020ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80020f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80020f4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020fa:	e841 2300 	strex	r3, r2, [r1]
 80020fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1e3      	bne.n	80020ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fda5 	bl	8000c5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800211e:	b29b      	uxth	r3, r3
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	b29b      	uxth	r3, r3
 8002124:	4619      	mov	r1, r3
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f8bf 	bl	80022aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800212c:	e09c      	b.n	8002268 <HAL_UART_IRQHandler+0x518>
 800212e:	bf00      	nop
 8002130:	08002385 	.word	0x08002385
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800213c:	b29b      	uxth	r3, r3
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 808e 	beq.w	800226c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8089 	beq.w	800226c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	330c      	adds	r3, #12
 8002160:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002164:	e853 3f00 	ldrex	r3, [r3]
 8002168:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800216a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002170:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	330c      	adds	r3, #12
 800217a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800217e:	647a      	str	r2, [r7, #68]	; 0x44
 8002180:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002182:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002184:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002186:	e841 2300 	strex	r3, r2, [r1]
 800218a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800218c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1e3      	bne.n	800215a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3314      	adds	r3, #20
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	e853 3f00 	ldrex	r3, [r3]
 80021a0:	623b      	str	r3, [r7, #32]
   return(result);
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	3314      	adds	r3, #20
 80021b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80021b6:	633a      	str	r2, [r7, #48]	; 0x30
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021be:	e841 2300 	strex	r3, r2, [r1]
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80021c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1e3      	bne.n	8002192 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	330c      	adds	r3, #12
 80021de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	e853 3f00 	ldrex	r3, [r3]
 80021e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0310 	bic.w	r3, r3, #16
 80021ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	330c      	adds	r3, #12
 80021f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80021fc:	61fa      	str	r2, [r7, #28]
 80021fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002200:	69b9      	ldr	r1, [r7, #24]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	e841 2300 	strex	r3, r2, [r1]
 8002208:	617b      	str	r3, [r7, #20]
   return(result);
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1e3      	bne.n	80021d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002216:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800221a:	4619      	mov	r1, r3
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f844 	bl	80022aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002222:	e023      	b.n	800226c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222c:	2b00      	cmp	r3, #0
 800222e:	d009      	beq.n	8002244 <HAL_UART_IRQHandler+0x4f4>
 8002230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f8b5 	bl	80023ac <UART_Transmit_IT>
    return;
 8002242:	e014      	b.n	800226e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00e      	beq.n	800226e <HAL_UART_IRQHandler+0x51e>
 8002250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f8f4 	bl	800244a <UART_EndTransmit_IT>
    return;
 8002262:	e004      	b.n	800226e <HAL_UART_IRQHandler+0x51e>
    return;
 8002264:	bf00      	nop
 8002266:	e002      	b.n	800226e <HAL_UART_IRQHandler+0x51e>
      return;
 8002268:	bf00      	nop
 800226a:	e000      	b.n	800226e <HAL_UART_IRQHandler+0x51e>
      return;
 800226c:	bf00      	nop
  }
}
 800226e:	37e8      	adds	r7, #232	; 0xe8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b095      	sub	sp, #84	; 0x54
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	330c      	adds	r3, #12
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d2:	e853 3f00 	ldrex	r3, [r3]
 80022d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80022de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	330c      	adds	r3, #12
 80022e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022e8:	643a      	str	r2, [r7, #64]	; 0x40
 80022ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80022ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022f0:	e841 2300 	strex	r3, r2, [r1]
 80022f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80022f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1e5      	bne.n	80022c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3314      	adds	r3, #20
 8002302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	e853 3f00 	ldrex	r3, [r3]
 800230a:	61fb      	str	r3, [r7, #28]
   return(result);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	64bb      	str	r3, [r7, #72]	; 0x48
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3314      	adds	r3, #20
 800231a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800231c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002324:	e841 2300 	strex	r3, r2, [r1]
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1e5      	bne.n	80022fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	2b01      	cmp	r3, #1
 8002336:	d119      	bne.n	800236c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	330c      	adds	r3, #12
 800233e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	e853 3f00 	ldrex	r3, [r3]
 8002346:	60bb      	str	r3, [r7, #8]
   return(result);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f023 0310 	bic.w	r3, r3, #16
 800234e:	647b      	str	r3, [r7, #68]	; 0x44
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	330c      	adds	r3, #12
 8002356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002358:	61ba      	str	r2, [r7, #24]
 800235a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235c:	6979      	ldr	r1, [r7, #20]
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	e841 2300 	strex	r3, r2, [r1]
 8002364:	613b      	str	r3, [r7, #16]
   return(result);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1e5      	bne.n	8002338 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	631a      	str	r2, [r3, #48]	; 0x30
}
 800237a:	bf00      	nop
 800237c:	3754      	adds	r7, #84	; 0x54
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f7ff ff7a 	bl	8002298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023a4:	bf00      	nop
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b21      	cmp	r3, #33	; 0x21
 80023be:	d13e      	bne.n	800243e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c8:	d114      	bne.n	80023f4 <UART_Transmit_IT+0x48>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d110      	bne.n	80023f4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	1c9a      	adds	r2, r3, #2
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	621a      	str	r2, [r3, #32]
 80023f2:	e008      	b.n	8002406 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	1c59      	adds	r1, r3, #1
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6211      	str	r1, [r2, #32]
 80023fe:	781a      	ldrb	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29b      	uxth	r3, r3
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	4619      	mov	r1, r3
 8002414:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10f      	bne.n	800243a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002428:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002438:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800243e:	2302      	movs	r3, #2
  }
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002460:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ff02 	bl	8002274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b08c      	sub	sp, #48	; 0x30
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b22      	cmp	r3, #34	; 0x22
 800248c:	f040 80ae 	bne.w	80025ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002498:	d117      	bne.n	80024ca <UART_Receive_IT+0x50>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d113      	bne.n	80024ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	1c9a      	adds	r2, r3, #2
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
 80024c8:	e026      	b.n	8002518 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024dc:	d007      	beq.n	80024ee <UART_Receive_IT+0x74>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10a      	bne.n	80024fc <UART_Receive_IT+0x82>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f8:	701a      	strb	r2, [r3, #0]
 80024fa:	e008      	b.n	800250e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002508:	b2da      	uxtb	r2, r3
 800250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29b      	uxth	r3, r3
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4619      	mov	r1, r3
 8002526:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002528:	2b00      	cmp	r3, #0
 800252a:	d15d      	bne.n	80025e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0220 	bic.w	r2, r2, #32
 800253a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800254a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	2b01      	cmp	r3, #1
 8002570:	d135      	bne.n	80025de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	330c      	adds	r3, #12
 800257e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	e853 3f00 	ldrex	r3, [r3]
 8002586:	613b      	str	r3, [r7, #16]
   return(result);
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f023 0310 	bic.w	r3, r3, #16
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	330c      	adds	r3, #12
 8002596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002598:	623a      	str	r2, [r7, #32]
 800259a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259c:	69f9      	ldr	r1, [r7, #28]
 800259e:	6a3a      	ldr	r2, [r7, #32]
 80025a0:	e841 2300 	strex	r3, r2, [r1]
 80025a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1e5      	bne.n	8002578 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b10      	cmp	r3, #16
 80025b8:	d10a      	bne.n	80025d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025d4:	4619      	mov	r1, r3
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff fe67 	bl	80022aa <HAL_UARTEx_RxEventCallback>
 80025dc:	e002      	b.n	80025e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff fe51 	bl	8002286 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e002      	b.n	80025ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e000      	b.n	80025ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80025ec:	2302      	movs	r3, #2
  }
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3730      	adds	r7, #48	; 0x30
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002632:	f023 030c 	bic.w	r3, r3, #12
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	430b      	orrs	r3, r1
 800263e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a2c      	ldr	r2, [pc, #176]	; (800270c <UART_SetConfig+0x114>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d103      	bne.n	8002668 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002660:	f7ff faf4 	bl	8001c4c <HAL_RCC_GetPCLK2Freq>
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	e002      	b.n	800266e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002668:	f7ff fadc 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 800266c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	009a      	lsls	r2, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fbb2 f3f3 	udiv	r3, r2, r3
 8002684:	4a22      	ldr	r2, [pc, #136]	; (8002710 <UART_SetConfig+0x118>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	0119      	lsls	r1, r3, #4
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	009a      	lsls	r2, r3, #2
 8002698:	441a      	add	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026a4:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <UART_SetConfig+0x118>)
 80026a6:	fba3 0302 	umull	r0, r3, r3, r2
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	2064      	movs	r0, #100	; 0x64
 80026ae:	fb00 f303 	mul.w	r3, r0, r3
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	3332      	adds	r3, #50	; 0x32
 80026b8:	4a15      	ldr	r2, [pc, #84]	; (8002710 <UART_SetConfig+0x118>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026c4:	4419      	add	r1, r3
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	009a      	lsls	r2, r3, #2
 80026d0:	441a      	add	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <UART_SetConfig+0x118>)
 80026de:	fba3 0302 	umull	r0, r3, r3, r2
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2064      	movs	r0, #100	; 0x64
 80026e6:	fb00 f303 	mul.w	r3, r0, r3
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	3332      	adds	r3, #50	; 0x32
 80026f0:	4a07      	ldr	r2, [pc, #28]	; (8002710 <UART_SetConfig+0x118>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	f003 020f 	and.w	r2, r3, #15
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	440a      	add	r2, r1
 8002702:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40013800 	.word	0x40013800
 8002710:	51eb851f 	.word	0x51eb851f

08002714 <__libc_init_array>:
 8002714:	b570      	push	{r4, r5, r6, lr}
 8002716:	2600      	movs	r6, #0
 8002718:	4d0c      	ldr	r5, [pc, #48]	; (800274c <__libc_init_array+0x38>)
 800271a:	4c0d      	ldr	r4, [pc, #52]	; (8002750 <__libc_init_array+0x3c>)
 800271c:	1b64      	subs	r4, r4, r5
 800271e:	10a4      	asrs	r4, r4, #2
 8002720:	42a6      	cmp	r6, r4
 8002722:	d109      	bne.n	8002738 <__libc_init_array+0x24>
 8002724:	f000 f822 	bl	800276c <_init>
 8002728:	2600      	movs	r6, #0
 800272a:	4d0a      	ldr	r5, [pc, #40]	; (8002754 <__libc_init_array+0x40>)
 800272c:	4c0a      	ldr	r4, [pc, #40]	; (8002758 <__libc_init_array+0x44>)
 800272e:	1b64      	subs	r4, r4, r5
 8002730:	10a4      	asrs	r4, r4, #2
 8002732:	42a6      	cmp	r6, r4
 8002734:	d105      	bne.n	8002742 <__libc_init_array+0x2e>
 8002736:	bd70      	pop	{r4, r5, r6, pc}
 8002738:	f855 3b04 	ldr.w	r3, [r5], #4
 800273c:	4798      	blx	r3
 800273e:	3601      	adds	r6, #1
 8002740:	e7ee      	b.n	8002720 <__libc_init_array+0xc>
 8002742:	f855 3b04 	ldr.w	r3, [r5], #4
 8002746:	4798      	blx	r3
 8002748:	3601      	adds	r6, #1
 800274a:	e7f2      	b.n	8002732 <__libc_init_array+0x1e>
 800274c:	080027b0 	.word	0x080027b0
 8002750:	080027b0 	.word	0x080027b0
 8002754:	080027b0 	.word	0x080027b0
 8002758:	080027b4 	.word	0x080027b4

0800275c <memset>:
 800275c:	4603      	mov	r3, r0
 800275e:	4402      	add	r2, r0
 8002760:	4293      	cmp	r3, r2
 8002762:	d100      	bne.n	8002766 <memset+0xa>
 8002764:	4770      	bx	lr
 8002766:	f803 1b01 	strb.w	r1, [r3], #1
 800276a:	e7f9      	b.n	8002760 <memset+0x4>

0800276c <_init>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	bf00      	nop
 8002770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002772:	bc08      	pop	{r3}
 8002774:	469e      	mov	lr, r3
 8002776:	4770      	bx	lr

08002778 <_fini>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	bf00      	nop
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr
